Metadata-Version: 2.4
Name: coldwatch
Version: 0.1.0
Summary: AT-SPI accessibility logger with CLI and analysis tools
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: loguru>=0.7
Provides-Extra: dev
Requires-Dist: pre-commit>=3.7; extra == "dev"
Requires-Dist: ruff>=0.6; extra == "dev"
Requires-Dist: black>=24.8; extra == "dev"
Requires-Dist: pytest>=8.3; extra == "dev"
Requires-Dist: pytest-cov>=5.0; extra == "dev"

# ColdWatch

ColdWatch is a Linux-first accessibility logger built on AT-SPI. It captures text widgets and related events from running applications, stores them in SQLite, and provides a CLI for runtime control and database analysis.

## Features
- Initial scan plus live monitoring of the accessibility tree via `pyatspi`.
- Deduplicated text snapshots with metadata and object registry tracking.
- Command line interface with `run` and `analyze` subcommands.
- Optional text suppression (`--no-text`) for metadata-only capture.

## System Requirements
- Linux desktop session with AT-SPI enabled (most modern GNOME-based environments).
- Packages: `pyatspi`, `PyGObject`, `dbus-run-session`, `xvfb-run` (for headless tests).
- Python 3.10 or newer.

## Installation
```sh
pip install .
```

Because `pyatspi` and `PyGObject` are provided by system packages, install them through your distribution (e.g., `sudo apt install python3-pyatspi python3-gi`).

## Usage
Run the logger (writes `accessibility_log.db` in the current directory):
```sh
coldwatch run
```

Run a single tree scan:
```sh
coldwatch run --once
```

Disable text capture (metadata only):
```sh
coldwatch run --no-text
```

Summarize the database:
```sh
coldwatch analyze accessibility_log.db
```

## Development
Install dev tools and hooks:
```sh
pip install -e .[dev]
pre-commit install
```

Run checks locally:
```sh
uvx pre-commit run --all-files
uvx ruff check .
uvx black --check .
uvx pytest -m "not integration"
```

### Integration tests
Run the full integration test suite (requires Linux with AT-SPI packages installed):
```sh
uvx pytest -m integration
```

This runs a headless test using `dbus-run-session` and `xvfb-run` to verify the logger captures text from a mock GTK application.

## Troubleshooting
- Ensure `XDG_RUNTIME_DIR` points to a valid user-writable path before launching in headless sessions.
- The logger must run as a regular desktop user; running as root will prevent AT-SPI from emitting events.
- See `TROUBLESHOOTING.md` for detailed guidance on dbus/Xvfb issues.

## Documentation
- `PRIVACY.md` — guidance on storing and securing captured data.
- `ARCHITECTURE.md` — module overview and event flow.
- `TROUBLESHOOTING.md` — common environment issues and fixes.
